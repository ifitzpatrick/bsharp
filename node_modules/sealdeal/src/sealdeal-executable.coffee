fs       = require 'fs'
path     = require 'path'
sealdeal = require '../lib/sealdeal'
server   = require '../lib/server'
spawn    = require('child_process').spawn

try
  config = -> JSON.parse fs.readFileSync('config.json')
catch e
  console.log 'Error reading config.json: please check config.json for syntax errors'
  throw e

buildTests = ->
  data = fs.readFileSync "test_config.js", "utf8"
  sealdeal.rmdirRecursive "test_build"
  fs.mkdirSync            "test_build"

  do ->
    configData = config()
    testFiles  = (filename for filename in configData.testFiles)

    concatJS   = configData.concatJS

    testFiles.push(concatJS + ".js") if concatJS
    testFiles.push("tests/*")
    fs.writeFileSync "test_build/test_config.js",
      data + "\nfiles = files.concat(#{JSON.stringify testFiles});",
      "utf8"

  do ->
    configData = config()
    testFiles  = configData.testFiles
    writeFile  = (filename, dir=configData.src) ->
      readData = sealdeal.readFile(path.join(dir, filename), configData)
      output = readData or fs.readFileSync(
        path.join(dir, filename), "utf8")

      sealdeal.writeFileRecursive path.join("test_build", filename), output

    for filename in testFiles
      fullFilename = path.join configData.src, filename
      if fs.existsSync(fullFilename) and fs.statSync(fullFilename).isDirectory()
        for subfilename in sealdeal.getFiles filename
          writeFile subfilename

      else
        writeFile filename

    concatJS = configData.concatJS
    if concatJS
      js = sealdeal.concatJSDir path.join(configData.src, concatJS)
      sealdeal.writeFileRecursive path.join("test_build", concatJS + ".js"), js

    for testfile in sealdeal.getFiles "tests"
      writeFile path.join("tests", sealdeal.removeExt(testfile, "coffee")), "."

commands =
  init: ->
    unless process.argv.length >= 4
      console.log('Usage: sealdeal init NAME')
      return

    filePath = process.argv[3]
    fs.mkdir(filePath) unless fs.existsSync filePath
    sealdeal.copyTree path.resolve(__dirname, '../site_templates/default'), filePath

  server:        -> server.run config()
  build:         -> sealdeal.build config()
  'test-server': ->
    buildTests()

    ps = spawn "testacular", ["start", "test_build/test_config.js"]
    ps.stdout.setEncoding "utf8"
    ps.stderr.setEncoding "utf8"
    ps.stdout.on "data", (data) -> console.log data
    ps.stderr.on "data", (data) -> console.log data

  test: ->
    buildTests()

    ps = spawn "testacular", ["run"]
    ps.stdout.setEncoding "utf8"
    ps.stderr.setEncoding "utf8"
    ps.stdout.on "data", (data) -> console.log data
    ps.stderr.on "data", (data) -> console.log data

if process.argv.length < 3
  console.log 'Tasks:', (command for own command, fn of commands).join(', ')
else
  commands[process.argv[2]]()
