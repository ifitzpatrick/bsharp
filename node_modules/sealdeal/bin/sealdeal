#!/usr/bin/env node
(function() {
  var buildTests, command, commands, config, fn, fs, path, sealdeal, server, spawn,
    __hasProp = {}.hasOwnProperty;

  fs = require('fs');

  path = require('path');

  sealdeal = require('../lib/sealdeal');

  server = require('../lib/server');

  spawn = require('child_process').spawn;

  try {
    config = function() {
      return JSON.parse(fs.readFileSync('config.json'));
    };
  } catch (e) {
    console.log('Error reading config.json: please check config.json for syntax errors');
    throw e;
  }

  buildTests = function() {
    var data;
    data = fs.readFileSync("test_config.js", "utf8");
    sealdeal.rmdirRecursive("test_build");
    fs.mkdirSync("test_build");
    (function() {
      var concatJS, configData, filename, testFiles;
      configData = config();
      testFiles = (function() {
        var _i, _len, _ref, _results;
        _ref = configData.testFiles;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          filename = _ref[_i];
          _results.push(filename);
        }
        return _results;
      })();
      concatJS = configData.concatJS;
      if (concatJS) {
        testFiles.push(concatJS + ".js");
      }
      testFiles.push("tests/*");
      return fs.writeFileSync("test_build/test_config.js", data + ("\nfiles = files.concat(" + (JSON.stringify(testFiles)) + ");"), "utf8");
    })();
    return (function() {
      var concatJS, configData, filename, fullFilename, js, subfilename, testFiles, testfile, writeFile, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _results;
      configData = config();
      testFiles = configData.testFiles;
      writeFile = function(filename, dir) {
        var output, readData;
        if (dir == null) {
          dir = configData.src;
        }
        readData = sealdeal.readFile(path.join(dir, filename), configData);
        output = readData || fs.readFileSync(path.join(dir, filename), "utf8");
        return sealdeal.writeFileRecursive(path.join("test_build", filename), output);
      };
      for (_i = 0, _len = testFiles.length; _i < _len; _i++) {
        filename = testFiles[_i];
        fullFilename = path.join(configData.src, filename);
        if (fs.existsSync(fullFilename) && fs.statSync(fullFilename).isDirectory()) {
          _ref = sealdeal.getFiles(filename);
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            subfilename = _ref[_j];
            writeFile(subfilename);
          }
        } else {
          writeFile(filename);
        }
      }
      concatJS = configData.concatJS;
      if (concatJS) {
        js = sealdeal.concatJSDir(path.join(configData.src, concatJS));
        sealdeal.writeFileRecursive(path.join("test_build", concatJS + ".js"), js);
      }
      _ref1 = sealdeal.getFiles("tests");
      _results = [];
      for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
        testfile = _ref1[_k];
        _results.push(writeFile(path.join("tests", sealdeal.removeExt(testfile, "coffee")), "."));
      }
      return _results;
    })();
  };

  commands = {
    init: function() {
      var filePath;
      if (!(process.argv.length >= 4)) {
        console.log('Usage: sealdeal init NAME');
        return;
      }
      filePath = process.argv[3];
      if (!fs.existsSync(filePath)) {
        fs.mkdir(filePath);
      }
      return sealdeal.copyTree(path.resolve(__dirname, '../site_templates/default'), filePath);
    },
    server: function() {
      return server.run(config());
    },
    build: function() {
      return sealdeal.build(config());
    },
    'test-server': function() {
      var ps;
      buildTests();
      ps = spawn("testacular", ["start", "test_build/test_config.js"]);
      ps.stdout.setEncoding("utf8");
      ps.stderr.setEncoding("utf8");
      ps.stdout.on("data", function(data) {
        return console.log(data);
      });
      return ps.stderr.on("data", function(data) {
        return console.log(data);
      });
    },
    test: function() {
      var ps;
      buildTests();
      ps = spawn("testacular", ["run"]);
      ps.stdout.setEncoding("utf8");
      ps.stderr.setEncoding("utf8");
      ps.stdout.on("data", function(data) {
        return console.log(data);
      });
      return ps.stderr.on("data", function(data) {
        return console.log(data);
      });
    }
  };

  if (process.argv.length < 3) {
    console.log('Tasks:', ((function() {
      var _results;
      _results = [];
      for (command in commands) {
        if (!__hasProp.call(commands, command)) continue;
        fn = commands[command];
        _results.push(command);
      }
      return _results;
    })()).join(', '));
  } else {
    commands[process.argv[2]]();
  }

}).call(this);
